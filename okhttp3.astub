import org.checkerframework.checker.mustcall.qual.*;
import org.checkerframework.checker.calledmethods.qual.*;
import org.checkerframework.dataflow.qual.SideEffectFree;
import org.checkerframework.common.returnsreceiver.qual.This;

package okhttp3;

class Response{
    @Owning ResponseBody body;

    //Builder class needed methods to be threaded through to the main build() method
    class Builder{
        @MustCallAlias Builder request(@MustCallAlias Builder this, request: Request):
        @MustCallAlias Builder protocol(@MustCallAlias Builder this, protocol: Protocol):
        @MustCallAlias Builder code(@MustCallAlias Builder this, code: Int):
        @MustCallAlias Builder message(@MustCallAlias Builder this, message: String):
        @MustCallAlias Builder handshake(@MustCallAlias Builder this, handshake: Handshake?):
        @MustCallAlias Builder header(@MustCallAlias Builder this, name: String, value: String):
        @MustCallAlias Builder addHeader(@MustCallAlias Builder this, name: String, value: String):
        @MustCallAlias Builder removeHeader(@MustCallAlias Builder this, name: String):
        @MustCallAlias Builder headers(@MustCallAlias Builder this, headers: Headers):
        @MustCallAlias Builder trailers(@MustCallAlias Builder this, trailersFn: (() -> Headers)):
        @MustCallAlias Builder body(@MustCallAlias Builder this, body: ResponseBody):
        @MustCallAlias Builder networkResponse(@MustCallAlias Builder this, networkResponse: Response?):
        @MustCallAlias Builder cacheResponse(@MustCallAlias Builder this, cacheResponse: Response?):
        @MustCallAlias Builder priorResponse(@MustCallAlias Builder this, priorResponse: Response?):
        @MustCallAlias Response build(@MustCallAlias Builder this);
    }
}

